#include <genesis.h>
#include "main.h"
#include "gfx.h"
#include "Variables.h"
#include "Routines.h"
#include "dma.h"
#include "Sprites.h"
#include "Sound.h"
#include "Init.h"
#include "Animations.h"
#include "GestionPAD.h"


//////////////////////////////////////////
//                  Animation des Sprites
/////////////////////////////////////////
void AnimationSprite(Sprite1_ *spr)
{
    // Sécurité
    if  (!spr->Visible  || spr->SpriteA==NULL ) return;

    // ID Airplane
    Sprite1_* spr2=Sprites;
    spr2 = &Sprites[IDPlane];

    // Tank Metal Slug du début de scène ?
    if (spr->ID==10)
	{
		switch (spr->Direction)
		{
		case 0:
			SPR_setAnim(spr->SpriteA,0);
			break;

		case 6:
			if (!spr->Transition) SPR_setAnim(spr->SpriteA,1);
			else SPR_setAnim(spr->SpriteA,2);
			break;
		}
		return;
	}

    // Init Tir IA
    if (spr->TirBusy)
    {
        // mort pendant le tir ?
        if (spr->MortIA)
        {
            spr->TirBusy=0;
            spr->TempoSprite=0;
            return;
        }
        spr->TempoRafale++;
        // Son tir et gestion Balle.
        if (spr->TempoRafale==30)
        {
			if (spr->IAFuite)
			{
				 spr->TempoRafale=0;
				 spr->TirBusy=0;
				 return;
			}
			u16 i=NombreBalle,j=0,Nb=IDBalle;
			Sprite1_* spr1=Sprites;
			spr1 = &Sprites[Nb];
			while(i--)
			{
				spr1 = &Sprites[Nb+j];
				if (spr1->StandBy)
				{
					spr1->StandBy=0;
					spr1->ID=46;
					spr1->Hit=0;
					SND_startPlayPCM_XGM(SFX_GENERIC1, 1, SOUND_PCM_CH2);
					SPR_setAnim(spr1->SpriteA,0);
					spr1->Visible=1;
					spr1->Vitesse=FIX32(3);
					spr1->CoordX=spr->CoordX;
					spr1->CoordY=spr->CoordY+spr->DeltaY;
					spr1->OffsetY=FIX32(-7);
					spr1->Direction=spr->Direction;
					if (spr1->Direction==0) spr1->Direction=4;
					if (spr1->Direction==98) spr1->Direction=6;
					break;
				}
				j++;
			}
        }
        if (spr->TempoRafale>70)
        {
            spr->TempoRafale=0;
            spr->TempoCountRafale=0;
            spr->TirBusy=0;
        }
    }


	// Bouclier ?
	if (spr->TypeBouclier)
	{
	    SPR_setAnim(spr->SpriteA,0);
	    return;
	}

	// Balles IA ?
	if (spr->ID==46)
	{
		if (spr->Hit)
		{
			spr->TempoSprite++;
			if (spr->Hit==1) SPR_setAnim(spr->SpriteA,2);
			if (spr->Hit==2) SPR_setAnim(spr->SpriteA,3);
			if (spr->TempoSprite>15)
			{
				spr->Hit=0;
				spr->StandBy=1;
				spr->Visible=0;
				spr->TempoSprite=0;
			}
		}
		else
            SPR_setAnim(spr->SpriteA,1);
		return;
	}

	// Balles joueur ?
    if (spr->ID==45)
	{
		if (spr->Hit)
		{
			spr->TempoSprite++;
			if (spr->Hit==1) SPR_setAnim(spr->SpriteA,2);
			if (spr->Hit==2) SPR_setAnim(spr->SpriteA,3);
			if (spr->TempoSprite>15)
			{
				spr->Hit=0;
				spr->StandBy=1;
				spr->Visible=0;
				spr->TempoSprite=0;
			}
		}
		else
            SPR_setAnim(spr->SpriteA,0);
		return;
	}

    // Animation unités
   switch (spr->ID)
   {
    // Airplane ?
    case 1:
        {
            switch(spr->Direction)
            {
            case 6:
                 SPR_setHFlip(spr->SpriteA,FALSE);
                 SPR_setAnim(spr->SpriteA,0);
                break;

            case 4:
                 SPR_setHFlip(spr->SpriteA,TRUE);
                 SPR_setAnim(spr->SpriteA,0);
                 break;
            }
            return;
        }


    // Unités terrestre
    // Soldat Bouclier
    case 2:
    {
        // Mort ?
        if (spr->MortIA && spr->IntIA==10)
        {
            SPR_setAnim(spr->SpriteA,6);
            return;
        }

       switch(spr->Direction)
       {
        case 0:
            // Tir ?
            if (spr->TirBusy)
            {
                SPR_setHFlip(spr->SpriteA,FALSE);
                spr->OffsetX=FIX32(6);
                SPR_setAnim(spr->SpriteA,2);
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA3);
                return;
            }
            if (spr->MortIA)
            {
                SPR_setHFlip(spr->SpriteA,FALSE);
                spr->OffsetX=FIX32(8);
                if (spr->MortIA==1) SPR_setAnim(spr->SpriteA,3);
                else SPR_setAnim(spr->SpriteA,4);
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA1);
            }
            else
            {
                SPR_setHFlip(spr->SpriteA,FALSE);
                spr->OffsetX=FIX32(0);
                SPR_setAnim(spr->SpriteA,0);
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA1);
            }
            break;

        case 98:
            // Tir ?
            if (spr->TirBusy)
            {
                SPR_setHFlip(spr->SpriteA,TRUE);
                spr->OffsetX=FIX32(10);
                SPR_setAnim(spr->SpriteA,2);
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA3);
                return;
            }

            if (spr->MortIA)
            {
                SPR_setHFlip(spr->SpriteA,TRUE);
                spr->OffsetX=FIX32(-13);
                if (spr->MortIA==1) SPR_setAnim(spr->SpriteA,3);
                else SPR_setAnim(spr->SpriteA,4);
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA1);
            }
            else
            {
                SPR_setHFlip(spr->SpriteA,TRUE);
                spr->OffsetX=FIX32(16);
                SPR_setAnim(spr->SpriteA,0);
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA1);
            }
            break;

        case 6:
            if (spr->MortIA)
            {
                SPR_setHFlip(spr->SpriteA,TRUE);
                spr->OffsetX=FIX32(-13);
                if (spr->MortIA==1) SPR_setAnim(spr->SpriteA,3);
                else SPR_setAnim(spr->SpriteA,4);
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA1);
            }
            else
            {
            	if (spr->IAFuite)
				{
					SPR_setHFlip(spr->SpriteA,TRUE);
					spr->OffsetX=FIX32(-13);
					SPR_setAnim(spr->SpriteA,5);
					SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA2);
				}
				else
				{
					SPR_setHFlip(spr->SpriteA,TRUE);
					spr->OffsetX=FIX32(16);
					SPR_setAnim(spr->SpriteA,1);
					SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA);
				}
            }
            break;

        case 4:
            if (spr->MortIA)
            {
                SPR_setHFlip(spr->SpriteA,FALSE);
                spr->OffsetX=FIX32(8);
                if (spr->MortIA==1) SPR_setAnim(spr->SpriteA,3);
                else SPR_setAnim(spr->SpriteA,4);
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA1);
            }
            else
            {
            	if (spr->IAFuite)
				{
					SPR_setHFlip(spr->SpriteA,FALSE);
					spr->OffsetX=FIX32(8);
					SPR_setAnim(spr->SpriteA,5);
					SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA2);
				}
				else
				{
					SPR_setHFlip(spr->SpriteA,FALSE);
					spr->OffsetX=FIX32(0);
					SPR_setAnim(spr->SpriteA,1);
					SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA);
				}
            }
            break;

       }
       return;
    }

    // Soldat RifleMan
    case 3:
    {
        // Mort ?
        if (spr->MortIA && spr->IntIA==10)
        {
            SPR_setAnim(spr->SpriteA,5);
            return;
        }
       switch(spr->Direction)
       {
        case 0:
            if (spr->MortIA)
            {
                SPR_setHFlip(spr->SpriteA,FALSE);
                spr->OffsetX=FIX32(8);
                if (spr->MortIA==1) SPR_setAnim(spr->SpriteA,3);
                else SPR_setAnim(spr->SpriteA,4);
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA1);
            }
            else
            {
                SPR_setHFlip(spr->SpriteA,FALSE);
                spr->OffsetX=FIX32(0);
                SPR_setAnim(spr->SpriteA,0);
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA1);
            }
            break;

        case 6:
            if (spr->MortIA)
            {
                SPR_setHFlip(spr->SpriteA,TRUE);
                spr->OffsetX=FIX32(-13);
                if (spr->MortIA==1) SPR_setAnim(spr->SpriteA,3);
                else SPR_setAnim(spr->SpriteA,4);
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA1);
            }
            else
            {
                SPR_setHFlip(spr->SpriteA,TRUE);
                spr->OffsetX=FIX32(0);
                SPR_setAnim(spr->SpriteA,1);
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA0);
            }
            break;

        case 4:
            if (spr->MortIA)
            {
                SPR_setHFlip(spr->SpriteA,FALSE);
                spr->OffsetX=FIX32(8);
                if (spr->MortIA==1) SPR_setAnim(spr->SpriteA,3);
                else SPR_setAnim(spr->SpriteA,4);
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA1);
            }
            else
            {
                SPR_setHFlip(spr->SpriteA,FALSE);
                spr->OffsetX=FIX32(0);
                SPR_setAnim(spr->SpriteA,1);
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA0);
            }
            break;

        case 50:
            if (spr->MortIA)
            {
                SPR_setHFlip(spr->SpriteA,FALSE);
                spr->OffsetX=FIX32(8);
                if (spr->MortIA==1) SPR_setAnim(spr->SpriteA,3);
                else SPR_setAnim(spr->SpriteA,4);
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA1);
            }
            else
            {
                SPR_setHFlip(spr->SpriteA,FALSE);
                spr->OffsetX=FIX32(0);
                SPR_setAnim(spr->SpriteA,2);
                // Cas d'un coup
                spr->TempoSprite++;
                if (spr->TempoSprite>40)
				{
					// Gestion Collision avec Joueur
					spr->TempoSprite=0;
					spr->CoupCrosse=spr->Direction;
				}
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA1);
            }
            break;

        case 51:
            if (spr->MortIA)
            {
                SPR_setHFlip(spr->SpriteA,TRUE);
                spr->OffsetX=FIX32(-13);
                if (spr->MortIA==1) SPR_setAnim(spr->SpriteA,3);
                else SPR_setAnim(spr->SpriteA,4);
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA1);
            }
            else
            {
                SPR_setHFlip(spr->SpriteA,TRUE);
                spr->OffsetX=FIX32(-16);
                SPR_setAnim(spr->SpriteA,2);
                spr->TempoSprite++;
                if (spr->TempoSprite>40)
				{
					// Gestion Collision avec Joueur
					spr->TempoSprite=0;
					spr->CoupCrosse=spr->Direction;
				}
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA1);
            }
            break;

        case 98:
            if (spr->MortIA)
            {
                SPR_setHFlip(spr->SpriteA,TRUE);
                spr->OffsetX=FIX32(-13);
                if (spr->MortIA==1) SPR_setAnim(spr->SpriteA,3);
                else SPR_setAnim(spr->SpriteA,4);
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA1);
            }
            else
            {
                SPR_setHFlip(spr->SpriteA,TRUE);
                spr->OffsetX=FIX32(-16);
                SPR_setAnim(spr->SpriteA,0);
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChangedIA1);
            }
            break;
       }
       return;
    }

    // Bombe ?!
        case 66:
            if (spr2->Direction==6)
            {
                SPR_setHFlip(spr->SpriteA,FALSE);
                spr->OffsetX=FIX32(0);
            }
            else
            {
                SPR_setHFlip(spr->SpriteA,TRUE);
                spr->OffsetX=FIX32(-13);
            }
            if (spr->Hit)
            {
                spr->TempoSprite++;
                if (spr->TempoSprite==1) SND_startPlayPCM_XGM(SFX_GENERIC9, 1, SOUND_PCM_CH3);
                SPR_setAnim(spr->SpriteA,5);
                if (spr->TempoSprite>=40)
                {
                    spr->StandBy=1;
                    spr->Hit=0;
                    spr->Visible=0;
                    spr->TempoSprite=0;
                    Sprite1_* SpriteAir=Sprites;
                    SpriteAir = &Sprites[IDPlane];
                    SpriteAir->PorteeTir=0;
                    return;
                }
            }
            else
            {
                spr->TempoSprite++;
                if (spr->TempoSprite<=25) SPR_setAnim(spr->SpriteA,6);
                else
                {
                    SPR_setAnim(spr->SpriteA,7);
                }
            }
            break;

    // Cas de joe !
    case 99:

        // Game over ?!
        if (GameOver==1)
        {
            SPR_setHFlip(spr->SpriteA,FALSE);
            SPR_setAnim(spr->SpriteA,10);
            return;
        }

        // Tir / Action du joueur ?!
        if (spr->Feu==1)
        {

        	// Cas d'un saut
            if (spr->Saut)
            {
                    SPR_setFrameChangeCallback(spr->SpriteA, &TimerChanged);
                    switch(spr->MemDir)
                    {
                        case 0:
                            spr->OffsetX=FIX32(5);
                            SPR_setHFlip(spr->SpriteA,FALSE);
                            SPR_setAnim(spr->SpriteA,7);
                            return;

                        case 6:
                            spr->OffsetX=FIX32(5);
                            SPR_setHFlip(spr->SpriteA,FALSE);
                            SPR_setAnim(spr->SpriteA,7);
                            return;

                        case 4:
                            spr->OffsetX=FIX32(10);
                            SPR_setHFlip(spr->SpriteA,TRUE);
                            SPR_setAnim(spr->SpriteA,7);
                            return;
                    }
                    return;
            }

            // Couteau ?!
            if (spr->Couteau)
			{
                    SPR_setFrameChangeCallback(spr->SpriteA, &TimerChanged);
                    switch(spr->MemDir)
                    {
                        case 0:
                            spr->OffsetX=FIX32(0);
                            SPR_setHFlip(spr->SpriteA,FALSE);
                            SPR_setAnim(spr->SpriteA,9);
                            return;

                        case 6:
                            spr->OffsetX=FIX32(0);
                            SPR_setHFlip(spr->SpriteA,FALSE);
                            SPR_setAnim(spr->SpriteA,9);
                            return;

                        case 4:
                            spr->OffsetX=FIX32(16);
                            SPR_setHFlip(spr->SpriteA,TRUE);
                            SPR_setAnim(spr->SpriteA,9);
                            return;
                    }
                    return;
			}
            switch(spr->Direction)
            {
            case 0:
                // Ajustement du timer d'animation du SE.
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChanged);
                switch(spr->MemDir)
                {
                    case 0:
                        SPR_setHFlip(spr->SpriteA,FALSE);
                        SPR_setAnim(spr->SpriteA,5);
                        spr->OffsetX=FIX32(0);
                        return;

                    case 6:
                        SPR_setHFlip(spr->SpriteA,FALSE);
                        SPR_setAnim(spr->SpriteA,5);
                        spr->OffsetX=FIX32(0);
                        return;

                    case 4:
                        SPR_setHFlip(spr->SpriteA,TRUE);
                        SPR_setAnim(spr->SpriteA,5);
                        spr->OffsetX=FIX32(16);
                        return;
                }

            case 2:
                switch(spr->MemDir)
                {
                    case 0:
                        SPR_setHFlip(spr->SpriteA,FALSE);
                        SPR_setAnim(spr->SpriteA,8);
                        spr->OffsetX=FIX32(-6);
                        return;

                    case 6:
                        SPR_setHFlip(spr->SpriteA,FALSE);
                        SPR_setAnim(spr->SpriteA,8);
                        spr->OffsetX=FIX32(-6);
                        return;

                    case 4:
                        SPR_setHFlip(spr->SpriteA,TRUE);
                        SPR_setAnim(spr->SpriteA,8);
                        spr->OffsetX=FIX32(22);
                        return;
                }
                return;

            case 4:
                spr->OffsetX=FIX32(16);
                SPR_setHFlip(spr->SpriteA,TRUE);
                SPR_setAnim(spr->SpriteA,6);
                break;

            case 6:
                spr->OffsetX=FIX32(0);
                SPR_setHFlip(spr->SpriteA,FALSE);
                SPR_setAnim(spr->SpriteA,6);
                break;

            }
            return;
        }

        //Saut ?!
        if (spr->Saut)
        {
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChanged);
                switch(spr->MemDir)
                {
                    case 0:
                        spr->OffsetX=FIX32(5);
                        SPR_setHFlip(spr->SpriteA,FALSE);
                        SPR_setAnim(spr->SpriteA,2);
                        return;

                    case 6:
                        spr->OffsetX=FIX32(5);
                        SPR_setHFlip(spr->SpriteA,FALSE);
                        SPR_setAnim(spr->SpriteA,2);
                        return;

                    case 4:
                        spr->OffsetX=FIX32(10);
                        SPR_setHFlip(spr->SpriteA,TRUE);
                        SPR_setAnim(spr->SpriteA,2);
                        return;
                }
        }

        // Déplacement / Divers
        switch(spr->Direction)
        {
            // Idle Joueur
            case 0:
                // Ajustement du timer d'animation du SE.
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChanged);
                switch(spr->MemDir)
                {
                    case 0:
                        SPR_setHFlip(spr->SpriteA,FALSE);
                        SPR_setAnim(spr->SpriteA,0);
                        spr->OffsetX=FIX32(0);
                        return;

                    case 6:
                        SPR_setHFlip(spr->SpriteA,FALSE);
                        SPR_setAnim(spr->SpriteA,0);
                        spr->OffsetX=FIX32(0);
                        return;

                    case 4:
                        SPR_setHFlip(spr->SpriteA,TRUE);
                        SPR_setAnim(spr->SpriteA,0);
                        spr->OffsetX=FIX32(16);
                        return;
                }

            case 2:
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChanged);
                switch(spr->MemDir)
                {
                    case 0:
                        SPR_setHFlip(spr->SpriteA,FALSE);
                        SPR_setAnim(spr->SpriteA,3);
                        spr->OffsetX=FIX32(0);
                        return;

                    case 6:
                        SPR_setHFlip(spr->SpriteA,FALSE);
                        SPR_setAnim(spr->SpriteA,3);
                        spr->OffsetX=FIX32(0);
                        return;

                    case 4:
                        SPR_setHFlip(spr->SpriteA,TRUE);
                        SPR_setAnim(spr->SpriteA,3);
                        spr->OffsetX=FIX32(16);
                        return;
                }
                break;

            case 26:
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChanged);
                spr->OffsetX=FIX32(0);
                SPR_setHFlip(spr->SpriteA,FALSE);
                SPR_setAnim(spr->SpriteA,4);
                break;

            case 24:
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChanged);
                spr->OffsetX=FIX32(16);
                SPR_setHFlip(spr->SpriteA,TRUE);
                SPR_setAnim(spr->SpriteA,4);
                break;

            case 4:
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChanged);
                spr->OffsetX=FIX32(16);
                SPR_setHFlip(spr->SpriteA,TRUE);
                SPR_setAnim(spr->SpriteA,1);
                break;

            case 6:
                SPR_setFrameChangeCallback(spr->SpriteA, &TimerChanged);
                spr->OffsetX=FIX32(0);
                SPR_setHFlip(spr->SpriteA,FALSE);
                SPR_setAnim(spr->SpriteA,1);
                break;

        }
        break;
   }
}


//////////////////////////////////////////
//                  Init Timer Sprite IA
/////////////////////////////////////////

void TimerChangedIA(Sprite* sprite)
{
    sprite->timer=4;
}

void TimerChangedIA3(Sprite* sprite)
{
    sprite->timer=6;
}

void TimerChangedIA0(Sprite* sprite)
{
    sprite->timer=3;
}

void TimerChangedIA2(Sprite* sprite)
{
    sprite->timer=2;
}

void TimerChangedIA1(Sprite* sprite)
{
    sprite->timer=10;
}

//////////////////////////////////////////
//                  Init Timer Sprite joueur
/////////////////////////////////////////
void TimerChanged(Sprite* sprite)
{
    Sprite1_* spr;
	spr = &Sprites[0];

	// Saut ?
	if (spr->Saut)
    {
        sprite->timer=8;
        return;
    }

    // Couteau ?
    if (spr->Couteau)
	{
		sprite->timer=6;
		return;
	}

    // Tir ?
	// Saut ?
	if (spr->Feu==1)
    {
        sprite->timer=4;
        return;
    }

	// Déplacement / Divers
    switch (spr->Direction)
    {
        case 0:
            sprite->timer=12;
            break;
        case 2:
            sprite->timer=12;
            break;
        case 24:
            sprite->timer=10;
            break;

        case 26:
            sprite->timer=10;
            break;
        case 6:
            if (spr->Sprint)   sprite->timer=2;
            else sprite->timer=4;
            break;
        case 4:
            if (spr->Sprint)   sprite->timer=2;
            else sprite->timer=4;
            break;
    }
}

